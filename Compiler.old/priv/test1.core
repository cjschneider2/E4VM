module 'test1' ['map_1'/2,
		'module_info'/0,
		'module_info'/1]
    attributes []
'map_1'/2 =
    %% Line 4
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_cor7,'nil'> when 'true' ->
	      'nil'
	  %% Line 5
	  <F,{K,V,Smaller,Larger}> when 'true' ->
	      let <_cor4> =
		  %% Line 6
		  apply F
		      (K, V)
	      in  let <_cor3> =
		      %% Line 6
		      apply 'map_1'/2
			  (F, Smaller)
		  in  let <_cor2> =
			  %% Line 6
			  apply 'map_1'/2
			      (F, Larger)
		      in  %% Line 6
			  {K,_cor4,_cor3,_cor2}
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'map_1',2}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    ( fun () ->
	  ( call ( 'erlang'
		   -| ['compiler_generated'] ):( 'get_module_info'
						 -| ['compiler_generated'] )
		(( 'test1'
		   -| ['compiler_generated'] ))
	    -| ['compiler_generated'] )
      -| ['compiler_generated'] )
'module_info'/1 =
    ( fun (( _cor0
	     -| ['compiler_generated'] )) ->
	  ( call ( 'erlang'
		   -| ['compiler_generated'] ):( 'get_module_info'
						 -| ['compiler_generated'] )
		(( 'test1'
		   -| ['compiler_generated'] ), ( _cor0
						  -| ['compiler_generated'] ))
	    -| ['compiler_generated'] )
      -| ['compiler_generated'] )
end