:MODULE e4core
:NIF .ERROR         -1 ( creates an error exception in the current process )
:NIF .MAKE-MFARITY  -2
:NIF .NIL           -3

( ------ stack operations ------ )
:NIF .ENTER  -10 ( TODO: maybe allocate frame on dynamic heap? )
:NIF .LEAVE  -11 ( TODO: if on dynamic heap maybe just let GC take it )
:NIF .LEAVE0 -11 ( same as LEAVE, only one can be in the code )
( .LD is an instruction now )
( .ST is an instruction now )
:NIF .APPLY  -12
:NIF .CALL   -13
:NIF .BIF    -14
( :NIF .JUMP   -15 )
:NIF .CALL-TAIL -16

( ------ comparison tests ------ )
:NIF ==     -20
:NIF =:=    -21

( ------ tuple stuff ------ )
:NIF .SET-ELEMENT       -30
( .GET-ELEMENT is an instruction now )
:NIF .ALLOC-RAW-TUPLE   -31 ( allocate tuple but do not set its cells )
:NIF .MAKE-TUPLE        -32 ( ... N -- Tuple , create from N values on stack )

( ------ type tests ------ )
:NIF .TUPLE?    -40
:NIF .LIST?     -41
:NIF .NIL?      -42
:NIF .ATOM?     -43
:NIF .INT?      -44
:NIF .FLOAT?    -45
:NIF .CONS?     -46
:NIF .NONVALUE? -47

( ------ list stuff ------ )
:NIF .CONS      -50 ( H T -- [H|T] , creates a cons cell )
:NIF .DECONS    -51 ( [H|T] -- H T , deconstructs a cons cell )
:NIF .HD        -52
:NIF .TL        -53

: ERROR-FN-CLAUSE 'ATOM function_clause .ERROR ;
: ERROR-BADMATCH 'ATOM badmatch .ERROR ;
: ERROR-BADARG 'ATOM badarg .ERROR ;
: ERROR-CASE-CLAUSE 'ATOM case_clause .ERROR ;

( OnFail X -- , jumps to OnFail if X is the nonvalue )
( : ON-FAIL-JMP
    .NONVALUE? IF .JUMP THEN ; )
