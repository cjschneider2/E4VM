module 'test1'
export ['map_1'/2,
	'module_info'/0,
	'module_info'/1,
	'test_return_var'/1]
attributes []
fdef 'map_1'/2(_cor1, _cor0) =
  match _cor1,_cor0
    alt
      select _cor0
	type k_tuple
	  {_ker5,_ker4,_ker3,_ker2} ->
	    do
	      call (_cor1)(_ker5, _ker4) >> <_cor4>
	    then
	    do
	      call (local 'map_1'/2)(_cor1, _ker3) >> <_cor3>
	    then
	    do
	      call (local 'map_1'/2)(_cor1, _ker2) >> <_cor2>
	    then
	    do
	      {_ker5,_cor4,_cor3,_cor2} >> <_ker6>
	    then
	    <<_ker6>>
	type k_atom
	  'undefined' ->
	    <<'undefined'>>
      do
	[_cor0] >> <_ker0>
      then
      do
	[_cor1|_ker0] >> <_ker1>
      then
      enter (remote 'erlang':'error'/2)('function_clause', _ker1)
  end >> <>
fdef 'test_return_var'/1(_cor0) =
  do
    bif (remote 'erlang':'*'/2)(_cor0, 2) >> <_ker0>
  then
  <<_ker0>>
fdef 'module_info'/0() =
  enter (remote 'erlang':'get_module_info'/1)('test1')
fdef 'module_info'/1(_cor0) =
  enter (remote 'erlang':'get_module_info'/2)('test1', _cor0)
end