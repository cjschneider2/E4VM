module 'gb_trees' ['balance'/1,
		   'delete'/2,
		   'delete_any'/2,
		   'empty'/0,
		   'enter'/3,
		   'from_orddict'/1,
		   'get'/2,
		   'insert'/3,
		   'is_defined'/2,
		   'is_empty'/1,
		   'iterator'/1,
		   'iterator_from'/2,
		   'keys'/1,
		   'largest'/1,
		   'lookup'/2,
		   'map'/2,
		   'module_info'/0,
		   'module_info'/1,
		   'next'/1,
		   'size'/1,
		   'smallest'/1,
		   'take_largest'/1,
		   'take_smallest'/1,
		   'to_list'/1,
		   'update'/3,
		   'values'/1]
    attributes [%% Line 160
		'export_type' =
		    %% Line 160
		    [{'tree',0}|[{'tree',2}|[{'iter',0}|[{'iter',2}]]]],
		%% Line 162
		'type' =
		    %% Line 162
		    [{'gb_tree_node',{'type',[162],'union',[{'atom',[162],'nil'}|[{'type',[163],'tuple',[{'var',[163],'K'}|[{'var',[163],'V'}|[{'user_type',[163],'gb_tree_node',[{'var',[163],'K'}|[{'var',[163],'V'}]]}|[{'user_type',[163],'gb_tree_node',[{'var',[163],'K'}|[{'var',[163],'V'}]]}]]]]}]]},[{'var',[162],'K'}|[{'var',[162],'V'}]]}],
		%% Line 164
		'opaque' =
		    %% Line 164
		    [{'tree',{'type',[164],'tuple',[{'type',[164],'non_neg_integer',[]}|[{'user_type',[164],'gb_tree_node',[{'var',[164],'Key'}|[{'var',[164],'Value'}]]}]]},[{'var',[164],'Key'}|[{'var',[164],'Value'}]]}],
		%% Line 165
		'type' =
		    %% Line 165
		    [{'tree',{'user_type',[165],'tree',[{'var',[165],'_'}|[{'var',[165],'_'}]]},[]}],
		%% Line 166
		'opaque' =
		    %% Line 166
		    [{'iter',{'type',[166],'list',[{'user_type',[166],'gb_tree_node',[{'var',[166],'Key'}|[{'var',[166],'Value'}]]}]},[{'var',[166],'Key'}|[{'var',[166],'Value'}]]}],
		%% Line 167
		'type' =
		    %% Line 167
		    [{'iter',{'user_type',[167],'iter',[{'var',[167],'_'}|[{'var',[167],'_'}]]},[]}],

'empty'/0 =
    %% Line 173
    fun () ->
	%% Line 174
	{0,'nil'}
'is_empty'/1 =
    %% Line 179
    fun (_cor0) ->
	case _cor0 of
	  <{0,'nil'}> when 'true' ->
	      %% Line 180
	      'true'
	  %% Line 181
	  <_cor2> when 'true' ->
	      %% Line 182
	      'false'
	end
'size'/1 =
    %% Line 187
    fun (_cor0) ->
	case _cor0 of
	  <{Size,_cor4}>
	      when let <_cor1> =
		    call 'erlang':'is_integer'
			(Size)
		in  let <_cor2> =
			call 'erlang':'>='
			    (Size, 0)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 188
	      Size
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'size',1}}] )
	    -| ['compiler_generated'] )
	end
'lookup'/2 =
    %% Line 195
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Key,{_cor4,T}> when 'true' ->
	      %% Line 196
	      apply 'lookup_1'/2
		  (Key, T)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'lookup',2}}] )
	    -| ['compiler_generated'] )
	end
'lookup_1'/2 =
    %% Line 205
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Key,{Key1,_cor4,Smaller,_cor5}>
	      when call 'erlang':'<'
		    (Key,
		     Key1) ->
	      %% Line 206
	      apply 'lookup_1'/2
		  (Key, Smaller)
	  %% Line 207
	  <Key,{Key1,_cor6,_cor7,Bigger}>
	      when call 'erlang':'>'
		    (Key,
		     Key1) ->
	      %% Line 208
	      apply 'lookup_1'/2
		  (Key, Bigger)
	  %% Line 209
	  <_cor8,{_cor9,Value,_cor10,_cor11}> when 'true' ->
	      %% Line 210
	      {'value',Value}
	  %% Line 211
	  <_cor12,'nil'> when 'true' ->
	      %% Line 212
	      'none'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'lookup_1',2}}] )
	    -| ['compiler_generated'] )
	end
'is_defined'/2 =
    %% Line 221
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Key,{_cor4,T}> when 'true' ->
	      %% Line 222
	      apply 'is_defined_1'/2
		  (Key, T)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'is_defined',2}}] )
	    -| ['compiler_generated'] )
	end
'is_defined_1'/2 =
    %% Line 224
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Key,{Key1,_cor4,Smaller,_cor5}>
	      when call 'erlang':'<'
		    (Key,
		     Key1) ->
	      %% Line 225
	      apply 'is_defined_1'/2
		  (Key, Smaller)
	  %% Line 226
	  <Key,{Key1,_cor6,_cor7,Bigger}>
	      when call 'erlang':'>'
		    (Key,
		     Key1) ->
	      %% Line 227
	      apply 'is_defined_1'/2
		  (Key, Bigger)
	  %% Line 228
	  <_cor8,{_cor9,_cor10,_cor11,_cor12}> when 'true' ->
	      %% Line 229
	      'true'
	  %% Line 230
	  <_cor13,'nil'> when 'true' ->
	      %% Line 231
	      'false'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'is_defined_1',2}}] )
	    -| ['compiler_generated'] )
	end
'get'/2 =
    %% Line 240
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Key,{_cor4,T}> when 'true' ->
	      %% Line 241
	      apply 'get_1'/2
		  (Key, T)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'get',2}}] )
	    -| ['compiler_generated'] )
	end
'get_1'/2 =
    %% Line 243
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Key,{Key1,_cor4,Smaller,_cor5}>
	      when call 'erlang':'<'
		    (Key,
		     Key1) ->
	      %% Line 244
	      apply 'get_1'/2
		  (Key, Smaller)
	  %% Line 245
	  <Key,{Key1,_cor6,_cor7,Bigger}>
	      when call 'erlang':'>'
		    (Key,
		     Key1) ->
	      %% Line 246
	      apply 'get_1'/2
		  (Key, Bigger)
	  %% Line 247
	  <_cor8,{_cor9,Value,_cor10,_cor11}> when 'true' ->
	      %% Line 248
	      Value
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'get_1',2}}] )
	    -| ['compiler_generated'] )
	end
'update'/3 =
    %% Line 256
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Key,Val,{S,T}> when 'true' ->
	      let <T1> =
		  %% Line 257
		  apply 'update_1'/3
		      (Key, Val, T)
	      in  %% Line 258
		  {S,T1}
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'update',3}}] )
	    -| ['compiler_generated'] )
	end
'update_1'/3 =
    %% Line 262
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Key,Value,{Key1,V,Smaller,Bigger}>
	      when call 'erlang':'<'
		    (Key,
		     Key1) ->
	      let <_cor3> =
		  %% Line 263
		  apply 'update_1'/3
		      (Key, Value, Smaller)
	      in  %% Line 263
		  {Key1,V,_cor3,Bigger}
	  %% Line 264
	  <Key,Value,{Key1,V,Smaller,Bigger}>
	      when call 'erlang':'>'
		    (Key,
		     Key1) ->
	      let <_cor4> =
		  %% Line 265
		  apply 'update_1'/3
		      (Key, Value, Bigger)
	      in  %% Line 265
		  {Key1,V,Smaller,_cor4}
	  %% Line 266
	  <Key,Value,{_cor8,_cor9,Smaller,Bigger}> when 'true' ->
	      %% Line 267
	      {Key,Value,Smaller,Bigger}
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'update_1',3}}] )
	    -| ['compiler_generated'] )
	end
'insert'/3 =
    %% Line 275
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Key,Val,{S,T}>
	      when call 'erlang':'is_integer'
		    (S) ->
	      let <S1> =
		  %% Line 276
		  call 'erlang':'+'
		      (S, 1)
	      in  let <_cor4> =
		      %% Line 277
		      call 'erlang':'*'
			  (S1, S1)
		  in  let <_cor5> =
			  %% Line 277
			  apply 'insert_1'/4
			      (Key, Val, T, _cor4)
		      in  %% Line 277
			  {S1,_cor5}
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'insert',3}}] )
	    -| ['compiler_generated'] )
	end
'insert_1'/4 =
    %% Line 279
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Key,Value,{Key1,V,Smaller,Bigger},S>
	      when call 'erlang':'<'
		    (Key,
		     Key1) ->
	      let <_cor4> =
		  %% Line 280
		  call 'erlang':'bsr'
		      (S, 1)
	      in  %% Line 280
		  case apply 'insert_1'/4
			   (Key, Value, Smaller, _cor4) of
		    %% Line 281
		    <{T1,H1,S1}> when 'true' ->
			let <T> =
			    %% Line 282
			    {Key1,V,T1,Bigger}
			in  %% Line 283
			    case apply 'count'/1
				     (Bigger) of
			      <{H2,S2}> when 'true' ->
				  let <_cor7> =
				      %% Line 284
				      call 'erlang':'max'
					  (H1, H2)
				  in  let <H> =
					  %% Line 284
					  call 'erlang':'bsl'
					      (_cor7, 1)
				      in  let <_cor9> =
					      %% Line 285
					      call 'erlang':'+'
						  (S1, S2)
					  in  let <SS> =
						  %% Line 285
						  call 'erlang':'+'
						      (_cor9, 1)
					      in  let <P> =
						      %% Line 286
						      call 'erlang':'*'
							  (SS, SS)
						  in  %% Line 287
						      case <> of
							%% Line 288
							<>
							    when call 'erlang':'>'
								  (H,
								   P) ->
							    %% Line 289
							    apply 'balance'/2
								(T, SS)
							%% Line 290
							<> when 'true' ->
							    %% Line 291
							    {T,H,SS}
						      end
			      ( <_cor6> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor6})
				-| ['compiler_generated'] )
			    end
		    %% Line 293
		    <T1> when 'true' ->
			%% Line 294
			{Key1,V,T1,Bigger}
		  end
	  %% Line 296
	  <Key,Value,{Key1,V,Smaller,Bigger},S>
	      when call 'erlang':'>'
		    (Key,
		     Key1) ->
	      let <_cor13> =
		  %% Line 297
		  call 'erlang':'bsr'
		      (S, 1)
	      in  %% Line 297
		  case apply 'insert_1'/4
			   (Key, Value, Bigger, _cor13) of
		    %% Line 298
		    <{T1,H1,S1}> when 'true' ->
			let <T> =
			    %% Line 299
			    {Key1,V,Smaller,T1}
			in  %% Line 300
			    case apply 'count'/1
				     (Smaller) of
			      <{H2,S2}> when 'true' ->
				  let <_cor16> =
				      %% Line 301
				      call 'erlang':'max'
					  (H1, H2)
				  in  let <H> =
					  %% Line 301
					  call 'erlang':'bsl'
					      (_cor16, 1)
				      in  let <_cor18> =
					      %% Line 302
					      call 'erlang':'+'
						  (S1, S2)
					  in  let <SS> =
						  %% Line 302
						  call 'erlang':'+'
						      (_cor18, 1)
					      in  let <P> =
						      %% Line 303
						      call 'erlang':'*'
							  (SS, SS)
						  in  %% Line 304
						      case <> of
							%% Line 305
							<>
							    when call 'erlang':'>'
								  (H,
								   P) ->
							    %% Line 306
							    apply 'balance'/2
								(T, SS)
							%% Line 307
							<> when 'true' ->
							    %% Line 308
							    {T,H,SS}
						      end
			      ( <_cor15> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor15})
				-| ['compiler_generated'] )
			    end
		    %% Line 310
		    <T1> when 'true' ->
			%% Line 311
			{Key1,V,Smaller,T1}
		  end
	  %% Line 313
	  <Key,Value,'nil',S>
	      when call 'erlang':'=:='
		    (S,
		     0) ->
	      %% Line 314
	      {{Key,Value,'nil','nil'},1,1}
	  %% Line 315
	  <Key,Value,'nil',_X_S> when 'true' ->
	      %% Line 316
	      {Key,Value,'nil','nil'}
	  %% Line 317
	  <Key,_cor26,_cor27,_cor28> when 'true' ->
	      %% Line 318
	      call 'erlang':'error'
		  ({'key_exists',Key})
	end
'enter'/3 =
    %% Line 326
    fun (_cor2,_cor1,_cor0) ->
	%% Line 327
	case apply 'is_defined'/2
		 (_cor2, _cor0) of
	  %% Line 328
	  <'true'> when 'true' ->
	      %% Line 329
	      apply 'update'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 330
	  <'false'> when 'true' ->
	      %% Line 331
	      apply 'insert'/3
		  (_cor2, _cor1, _cor0)
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'count'/1 =
    %% Line 336
    fun (_cor0) ->
	case _cor0 of
	  <{_cor8,_cor9,'nil','nil'}> when 'true' ->
	      %% Line 337
	      {1,1}
	  %% Line 338
	  <{_cor10,_cor11,Sm,Bi}> when 'true' ->
	      %% Line 339
	      case apply 'count'/1
		       (Sm) of
		<{H1,S1}> when 'true' ->
		    %% Line 340
		    case apply 'count'/1
			     (Bi) of
		      <{H2,S2}> when 'true' ->
			  let <_cor5> =
			      %% Line 341
			      call 'erlang':'max'
				  (H1, H2)
			  in  let <_cor6> =
				  %% Line 341
				  call 'erlang':'bsl'
				      (_cor5, 1)
			      in  let <_cor3> =
				      %% Line 341
				      call 'erlang':'+'
					  (S1, S2)
				  in  let <_cor4> =
					  %% Line 341
					  call 'erlang':'+'
					      (_cor3, 1)
				      in  %% Line 341
					  {_cor6,_cor4}
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 342
	  <'nil'> when 'true' ->
	      %% Line 343
	      {1,0}
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'count',1}}] )
	    -| ['compiler_generated'] )
	end
'balance'/1 =
    %% Line 351
    fun (_cor0) ->
	case _cor0 of
	  <{S,T}> when 'true' ->
	      let <_cor1> =
		  %% Line 352
		  apply 'balance'/2
		      (T, S)
	      in  %% Line 352
		  {S,_cor1}
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'balance',1}}] )
	    -| ['compiler_generated'] )
	end
'balance'/2 =
    %% Line 354
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 355
	    apply 'to_list_1'/1
		(_cor1)
	in  %% Line 355
	    apply 'balance_list'/2
		(_cor2, _cor0)
'balance_list'/2 =
    %% Line 357
    fun (_cor1,_cor0) ->
	%% Line 358
	case apply 'balance_list_1'/2
		 (_cor1, _cor0) of
	  <{T,[]}> when 'true' ->
	      %% Line 359
	      T
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'balance_list_1'/2 =
    %% Line 361
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <L,S>
	      when call 'erlang':'>'
		    (S,
		     1) ->
	      let <Sm> =
		  %% Line 362
		  call 'erlang':'-'
		      (S, 1)
	      in  let <S2> =
		      %% Line 363
		      call 'erlang':'div'
			  (Sm, 2)
		  in  let <S1> =
			  %% Line 364
			  call 'erlang':'-'
			      (Sm, S2)
		      in  %% Line 365
			  case apply 'balance_list_1'/2
				   (L, S1) of
			    <{T1,[{K,V}|L1]}> when 'true' ->
				%% Line 366
				case apply 'balance_list_1'/2
					 (L1, S2) of
				  <{T2,L2}> when 'true' ->
				      let <T> =
					  %% Line 367
					  {K,V,T1,T2}
				      in  %% Line 368
					  {T,L2}
				  ( <_cor6> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor6})
				    -| ['compiler_generated'] )
				end
			    ( <_cor5> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor5})
			      -| ['compiler_generated'] )
			  end
	  %% Line 369
	  <[{Key,Val}|L],1> when 'true' ->
	      %% Line 370
	      {{Key,Val,'nil','nil'},L}
	  %% Line 371
	  <L,0> when 'true' ->
	      %% Line 372
	      {'nil',L}
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8})
		  -| [{'function_name',{'balance_list_1',2}}] )
	    -| ['compiler_generated'] )
	end
'from_orddict'/1 =
    %% Line 378
    fun (_cor0) ->
	let <S> =
	    %% Line 379
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor2> =
		%% Line 380
		apply 'balance_list'/2
		    (_cor0, S)
	    in  %% Line 380
		{S,_cor2}
'delete_any'/2 =
    %% Line 388
    fun (_cor1,_cor0) ->
	%% Line 389
	case apply 'is_defined'/2
		 (_cor1, _cor0) of
	  %% Line 390
	  <'true'> when 'true' ->
	      %% Line 391
	      apply 'delete'/2
		  (_cor1, _cor0)
	  %% Line 392
	  <'false'> when 'true' ->
	      _cor0
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'delete'/2 =
    %% Line 402
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Key,{S,T}>
	      when let <_cor2> =
		    call 'erlang':'is_integer'
			(S)
		in  let <_cor3> =
			call 'erlang':'>='
			    (S, 0)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      let <_cor5> =
		  %% Line 403
		  call 'erlang':'-'
		      (S, 1)
	      in  let <_cor4> =
		      %% Line 403
		      apply 'delete_1'/2
			  (Key, T)
		  in  %% Line 403
		      {_cor5,_cor4}
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'delete',2}}] )
	    -| ['compiler_generated'] )
	end
'delete_1'/2 =
    %% Line 407
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Key,{Key1,Value,Smaller,Larger}>
	      when call 'erlang':'<'
		    (Key,
		     Key1) ->
	      let <Smaller1> =
		  %% Line 408
		  apply 'delete_1'/2
		      (Key, Smaller)
	      in  %% Line 409
		  {Key1,Value,Smaller1,Larger}
	  %% Line 410
	  <Key,{Key1,Value,Smaller,Bigger}>
	      when call 'erlang':'>'
		    (Key,
		     Key1) ->
	      let <Bigger1> =
		  %% Line 411
		  apply 'delete_1'/2
		      (Key, Bigger)
	      in  %% Line 412
		  {Key1,Value,Smaller,Bigger1}
	  %% Line 413
	  <_cor6,{_cor7,_cor8,Smaller,Larger}> when 'true' ->
	      %% Line 414
	      apply 'merge'/2
		  (Smaller, Larger)
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'delete_1',2}}] )
	    -| ['compiler_generated'] )
	end
'merge'/2 =
    %% Line 416
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Smaller,'nil'> when 'true' ->
	      %% Line 417
	      Smaller
	  %% Line 418
	  <'nil',Larger> when 'true' ->
	      %% Line 419
	      Larger
	  %% Line 420
	  <Smaller,Larger> when 'true' ->
	      %% Line 421
	      case apply 'take_smallest1'/1
		       (Larger) of
		<{Key,Value,Larger1}> when 'true' ->
		    %% Line 422
		    {Key,Value,Smaller,Larger1}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	end
'take_smallest'/1 =
    %% Line 430
    fun (_cor0) ->
	case _cor0 of
	  <{Size,Tree}>
	      when let <_cor1> =
		    call 'erlang':'is_integer'
			(Size)
		in  let <_cor2> =
			call 'erlang':'>='
			    (Size, 0)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 431
	      case apply 'take_smallest1'/1
		       (Tree) of
		<{Key,Value,Larger}> when 'true' ->
		    let <_cor4> =
			%% Line 432
			call 'erlang':'-'
			    (Size, 1)
		    in  %% Line 432
			{Key,Value,{_cor4,Larger}}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'take_smallest',1}}] )
	    -| ['compiler_generated'] )
	end
'take_smallest1'/1 =
    %% Line 434
    fun (_cor0) ->
	case _cor0 of
	  <{Key,Value,'nil',Larger}> when 'true' ->
	      %% Line 435
	      {Key,Value,Larger}
	  %% Line 436
	  <{Key,Value,Smaller,Larger}> when 'true' ->
	      %% Line 437
	      case apply 'take_smallest1'/1
		       (Smaller) of
		<{Key1,Value1,Smaller1}> when 'true' ->
		    %% Line 438
		    {Key1,Value1,{Key,Value,Smaller1,Larger}}
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'take_smallest1',1}}] )
	    -| ['compiler_generated'] )
	end
'smallest'/1 =
    %% Line 443
    fun (_cor0) ->
	case _cor0 of
	  <{_cor2,Tree}> when 'true' ->
	      %% Line 444
	      apply 'smallest_1'/1
		  (Tree)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'smallest',1}}] )
	    -| ['compiler_generated'] )
	end
'smallest_1'/1 =
    %% Line 446
    fun (_cor0) ->
	case _cor0 of
	  <{Key,Value,'nil',_X_Larger}> when 'true' ->
	      %% Line 447
	      {Key,Value}
	  %% Line 448
	  <{_X_Key,_X_Value,Smaller,_X_Larger}> when 'true' ->
	      %% Line 449
	      apply 'smallest_1'/1
		  (Smaller)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'smallest_1',1}}] )
	    -| ['compiler_generated'] )
	end
'take_largest'/1 =
    %% Line 455
    fun (_cor0) ->
	case _cor0 of
	  <{Size,Tree}>
	      when let <_cor1> =
		    call 'erlang':'is_integer'
			(Size)
		in  let <_cor2> =
			call 'erlang':'>='
			    (Size, 0)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 456
	      case apply 'take_largest1'/1
		       (Tree) of
		<{Key,Value,Smaller}> when 'true' ->
		    let <_cor4> =
			%% Line 457
			call 'erlang':'-'
			    (Size, 1)
		    in  %% Line 457
			{Key,Value,{_cor4,Smaller}}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'take_largest',1}}] )
	    -| ['compiler_generated'] )
	end
'take_largest1'/1 =
    %% Line 459
    fun (_cor0) ->
	case _cor0 of
	  <{Key,Value,Smaller,'nil'}> when 'true' ->
	      %% Line 460
	      {Key,Value,Smaller}
	  %% Line 461
	  <{Key,Value,Smaller,Larger}> when 'true' ->
	      %% Line 462
	      case apply 'take_largest1'/1
		       (Larger) of
		<{Key1,Value1,Larger1}> when 'true' ->
		    %% Line 463
		    {Key1,Value1,{Key,Value,Smaller,Larger1}}
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'take_largest1',1}}] )
	    -| ['compiler_generated'] )
	end
'largest'/1 =
    %% Line 468
    fun (_cor0) ->
	case _cor0 of
	  <{_cor2,Tree}> when 'true' ->
	      %% Line 469
	      apply 'largest_1'/1
		  (Tree)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'largest',1}}] )
	    -| ['compiler_generated'] )
	end
'largest_1'/1 =
    %% Line 471
    fun (_cor0) ->
	case _cor0 of
	  <{Key,Value,_X_Smaller,'nil'}> when 'true' ->
	      %% Line 472
	      {Key,Value}
	  %% Line 473
	  <{_X_Key,_X_Value,_X_Smaller,Larger}> when 'true' ->
	      %% Line 474
	      apply 'largest_1'/1
		  (Larger)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'largest_1',1}}] )
	    -| ['compiler_generated'] )
	end
'to_list'/1 =
    %% Line 481
    fun (_cor0) ->
	case _cor0 of
	  <{_cor2,T}> when 'true' ->
	      %% Line 482
	      apply 'to_list'/2
		  (T, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'to_list',1}}] )
	    -| ['compiler_generated'] )
	end
'to_list_1'/1 =
    %% Line 484
    fun (_cor0) ->
	apply 'to_list'/2
	    (_cor0, [])
'to_list'/2 =
    %% Line 486
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{Key,Value,Small,Big},L> when 'true' ->
	      let <_cor2> =
		  %% Line 487
		  apply 'to_list'/2
		      (Big, L)
	      in  %% Line 487
		  apply 'to_list'/2
		      (Small, [{Key,Value}|_cor2])
	  %% Line 488
	  <'nil',L> when 'true' ->
	      L
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'to_list',2}}] )
	    -| ['compiler_generated'] )
	end
'keys'/1 =
    %% Line 495
    fun (_cor0) ->
	case _cor0 of
	  <{_cor2,T}> when 'true' ->
	      %% Line 496
	      apply 'keys'/2
		  (T, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'keys',1}}] )
	    -| ['compiler_generated'] )
	end
'keys'/2 =
    %% Line 498
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{Key,_X_Value,Small,Big},L> when 'true' ->
	      let <_cor2> =
		  %% Line 499
		  apply 'keys'/2
		      (Big, L)
	      in  %% Line 499
		  apply 'keys'/2
		      (Small, [Key|_cor2])
	  %% Line 500
	  <'nil',L> when 'true' ->
	      L
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'keys',2}}] )
	    -| ['compiler_generated'] )
	end
'values'/1 =
    %% Line 507
    fun (_cor0) ->
	case _cor0 of
	  <{_cor2,T}> when 'true' ->
	      %% Line 508
	      apply 'values'/2
		  (T, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'values',1}}] )
	    -| ['compiler_generated'] )
	end
'values'/2 =
    %% Line 510
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{_X_Key,Value,Small,Big},L> when 'true' ->
	      let <_cor2> =
		  %% Line 511
		  apply 'values'/2
		      (Big, L)
	      in  %% Line 511
		  apply 'values'/2
		      (Small, [Value|_cor2])
	  %% Line 512
	  <'nil',L> when 'true' ->
	      L
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'values',2}}] )
	    -| ['compiler_generated'] )
	end
'iterator'/1 =
    %% Line 520
    fun (_cor0) ->
	case _cor0 of
	  <{_cor2,T}> when 'true' ->
	      %% Line 521
	      apply 'iterator_1'/1
		  (T)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'iterator',1}}] )
	    -| ['compiler_generated'] )
	end
'iterator_1'/1 =
    %% Line 523
    fun (_cor0) ->
	%% Line 524
	apply 'iterator'/2
	    (_cor0, [])
'iterator'/2 =
    %% Line 529
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <T = {_cor4,_cor5,'nil',_cor6},As> when 'true' ->
	      %% Line 530
	      [T|As]
	  %% Line 531
	  <T = {_cor7,_cor8,L,_cor9},As> when 'true' ->
	      %% Line 532
	      apply 'iterator'/2
		  (L, [T|As])
	  %% Line 533
	  <'nil',As> when 'true' ->
	      %% Line 534
	      As
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'iterator',2}}] )
	    -| ['compiler_generated'] )
	end
'iterator_from'/2 =
    %% Line 542
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S,{_cor4,T}> when 'true' ->
	      %% Line 543
	      apply 'iterator_1_from'/2
		  (S, T)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'iterator_from',2}}] )
	    -| ['compiler_generated'] )
	end
'iterator_1_from'/2 =
    %% Line 545
    fun (_cor1,_cor0) ->
	%% Line 546
	apply 'iterator_from'/3
	    (_cor1, _cor0, [])
'iterator_from'/3 =
    %% Line 548
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <S,{K,_cor6,_cor7,T},As>
	      when call 'erlang':'<'
		    (K,
		     S) ->
	      %% Line 549
	      apply 'iterator_from'/3
		  (S, T, As)
	  %% Line 550
	  <_cor8,T = {_cor9,_cor10,'nil',_cor11},As> when 'true' ->
	      %% Line 551
	      [T|As]
	  %% Line 552
	  <S,T = {_cor12,_cor13,L,_cor14},As> when 'true' ->
	      %% Line 553
	      apply 'iterator_from'/3
		  (S, L, [T|As])
	  %% Line 554
	  <_cor15,'nil',As> when 'true' ->
	      %% Line 555
	      As
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'iterator_from',3}}] )
	    -| ['compiler_generated'] )
	end
'next'/1 =
    %% Line 563
    fun (_cor0) ->
	case _cor0 of
	  <[{X,V,_cor3,T}|As]> when 'true' ->
	      let <_cor1> =
		  %% Line 564
		  apply 'iterator'/2
		      (T, As)
	      in  %% Line 564
		  {X,V,_cor1}
	  %% Line 565
	  <[]> when 'true' ->
	      %% Line 566
	      'none'
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'next',1}}] )
	    -| ['compiler_generated'] )
	end
'map'/2 =
    %% Line 575
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <F,{Size,Tree}>
	      when call 'erlang':'is_function'
		    (F,
		     2) ->
	      let <_cor2> =
		  %% Line 576
		  apply 'map_1'/2
		      (F, Tree)
	      in  %% Line 576
		  {Size,_cor2}
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'map',2}}] )
	    -| ['compiler_generated'] )
	end
'map_1'/2 =
    %% Line 578
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_cor7,'nil'> when 'true' ->
	      'nil'
	  %% Line 579
	  <F,{K,V,Smaller,Larger}> when 'true' ->
	      let <_cor4> =
		  %% Line 580
		  apply F
		      (K, V)
	      in  let <_cor3> =
		      %% Line 580
		      apply 'map_1'/2
			  (F, Smaller)
		  in  let <_cor2> =
			  %% Line 580
			  apply 'map_1'/2
			      (F, Larger)
		      in  %% Line 580
			  {K,_cor4,_cor3,_cor2}
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'map_1',2}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    ( fun () ->
	  ( call ( 'erlang'
		   -| ['compiler_generated'] ):( 'get_module_info'
						 -| ['compiler_generated'] )
		(( 'gb_trees'
		   -| ['compiler_generated'] ))
	    -| ['compiler_generated'] )
      -| ['compiler_generated'] )
'module_info'/1 =
    ( fun (( _cor0
	     -| ['compiler_generated'] )) ->
	  ( call ( 'erlang'
		   -| ['compiler_generated'] ):( 'get_module_info'
						 -| ['compiler_generated'] )
		(( 'gb_trees'
		   -| ['compiler_generated'] ), ( _cor0
						  -| ['compiler_generated'] ))
	    -| ['compiler_generated'] )
      -| ['compiler_generated'] )
end